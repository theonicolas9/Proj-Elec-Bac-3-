#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <LiquidCrystal_I2C.h> // Library for LCD

const int RXPin = 4, TXPin = 5;  
const uint32_t GPSBaud = 4800;

SoftwareSerial gpsSerial(RXPin, TXPin); // RX, TX
TinyGPSPlus gps;
LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address 0x27, 16 column and 2 rows

float lastTime=0; 
float interval=1000; 
float intervalsec=0;
float speed_last=0.0; 

float latitude = 0.0;
float longitude = 0.0;
float speed_curr = 0.0; 

int date_year = 0;
int date_month = 0;
int date_day = 0;

int limit=0;

void setup() {
  lcd.init(); 
  lcd.backlight();       
   
  lcd.setCursor(0,0);
  lcd.print(" Affichage de ");
  lcd.setCursor(1,1);
  lcd.print(" vitesse : ");  
  
  Serial.begin(9600); // port serial de communication avec le pc
  gpsSerial.begin(GPSBaud); // port serial de communication avec le capteur GPS
  
  Serial.println(F("Arduino - GPS module"));    
                                       
}

void loop() {
  
//  latitude = 0.0;
//  longitude = 0.0;
//
//  date_year = 0;
//  date_month = 0;
//  date_day = 0;

   if ( gpsSerial.available()) {
      gps.encode(gpsSerial.read()); 
       
      if (gps.location.isValid()) { // s'informer sur la fonction isUpdated 
       
        latitude = gps.location.lat();
        longitude = gps.location.lng();
      }
      if (gps.speed.isValid()) {
          speed_curr = gps.speed.kmph(); // On met en entier comme sur un vrai GPS 
      }
      if ( gps.date.isValid()) {
        date_year = gps.date.year();
        date_month = gps.date.month();
        date_day = gps.date.day();
      } 
  }
  
  if ( speed_curr ) {
    int val = speed_curr;
    
    switch( val ) {
      case 0 ... 29:
      interval = 10000; // Intervalle de 10 secondes pour les vitesses <= 30 km/h
      intervalsec= interval/1000;
     // limit=30;
        break;
      case 30 ... 49:
      interval = 5000; // Intervalle de 10 secondes pour les vitesses <= 50 km/h
      intervalsec= interval/1000;
    //  limit=50;
       
        break;
      default:
      interval = 2000; // Intervalle de 2secondes pour les vitesses > 50 km/h
      intervalsec= interval/1000;    
        break;
    }  
  }    
  int time_curr = millis();
  
  if (( time_curr - lastTime) >= interval) {    
        lastTime = time_curr;
             
  
      if ( latitude ) {
            Serial.print(F("- latitude : ")); 
            Serial.println( latitude );
      } 
      if ( longitude ) {
            Serial.print(F("- longitude : ")); 
            Serial.println( longitude );
      } 
      if ( date_year ) {
            Serial.print(F("- date_year : ")); 
            Serial.println( date_year );
      }
      if ( date_month ) {
            Serial.print(F("- date_month : "));  
            Serial.println( date_month );
      }
      if ( date_day ) {
            Serial.print(F("- date_day : ")); 
            Serial.println( date_day );
      }
      
      if ( speed_curr ) {
            Serial.print(F("- speed_curr : "));  
            Serial.println( speed_curr );
//            Serial.print("$$$$$$$$$$$ Vitesse inférieure ou égale à ");
//            Serial.print(limit);
//            Serial.print(" interval de ");
            Serial.print("$$$$$$$$$$$ interval ");
            Serial.print(intervalsec);
            Serial.println(" secondes"); 
            
            if ( speed_curr != speed_last ) // afin d'alléger 
            {
             lcd.setCursor(12,1);
             lcd.print(speed_curr);
             lcd.print("  ");
             speed_last = speed_curr;
            }  
          
   }
    
 }
}
