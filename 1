#include <SoftwareSerial.h>
#include <TinyGPS++.h>

const int RXPin = 4, TXPin = 5;  
const uint32_t GPSBaud = 4800;

SoftwareSerial gpsSerial(RXPin, TXPin); // RX, TX
TinyGPSPlus gps;

volatile bool ppsTriggered = false;
unsigned long lastPpsTime = 0; //Une variable booléenne ppsTriggered est utilisée pour indiquer si une interruption PPS s'est produite. 
unsigned long lastPrintTime = 0;  //lastPpsTime stocke le temps de la dernière interruption PPS.
float lastSpeed = 0.0;  // dernière vitesse 
float interval = 1000; // ms 

void setup() {
  Serial.begin(9600);
  gpsSerial.begin(GPSBaud);
  pinMode(3, INPUT); // PPS pin (2 ou 3 sur Arduino pour interruption)
  attachInterrupt(digitalPinToInterrupt(3), ppsISR, RISING); // fonction d'interruption qui va nous permettre de dire que l'interruption a eu lieu, 
                                                             // donc que le PPS Pin est actif et qu'on peut lire les données 
  Serial.println(F("Arduino - GPS module"));                                                       
}

void loop() {

  if (ppsTriggered && (millis() - lastPpsTime >= interval)) {    //si une interruption PPS a été déclenchée (voir fct d'interruption) et que le temps écoulé depuis la dernière interruption est supérieur ou égal à l'intervalle d'impression, 
                                                                      // le traitement des données GPS est effectué
                                                             
    ppsTriggered = false; // on le remet en faux pour la prochaine fois 
    lastPrintTime = millis(); 
      // update GPS data
    while (gpsSerial.available() > 0) {
      gps.encode(gpsSerial.read());
    }

    if (gps.location.isValid()) {   
        Serial.print(F("- latitude: "));
        Serial.println(gps.location.lat());

        Serial.print(F("- longitude: "));  //print(F()) signifie que le string n'utilise pas de RAM. Si vous utilisez F(), vous pouvez déplacer les string constant vers la mémoire programme au lieu de la RAM. Cela prendra de l'espace et diminuera la quantité d'autre code que vous pouvez écrire. Mais cela libérera de la RAM dynamique.
        Serial.println(gps.location.lng());

        Serial.print(F("- altitude: "));
        if (gps.altitude.isValid())
          Serial.println(gps.altitude.meters());
        else
          Serial.println(F("INVALID"));
      } else {
        Serial.println(F("- location: INVALID"));
      }
      Serial.print(F("- GPS date&time: "));
        if (gps.date.isValid() && gps.time.isValid()) {
           Serial.print(gps.date.year());
           Serial.print(F("-"));
           Serial.print(gps.date.month());
           Serial.print(F("-"));
           Serial.print(gps.date.day());
           Serial.print(F(" "));
           Serial.print(gps.time.hour());
           Serial.print(F(":"));
          Serial.print(gps.time.minute());
          Serial.print(F(":"));
          Serial.println(gps.time.second());
        }
          else {
          Serial.println(F("INVALID"));
          }

          Serial.print(F("- speed: "));
        if (gps.speed.isValid()) {
          float speed = gps.speed.kmph();
          speed++;
          if (speed > 0 && speed != lastSpeed) {
            lastSpeed = speed;
            if (speed > 50) {
              interval = 2000; // Intervalle de 2secondes pour les vitesses > 50 km/h
            } else if (speed > 30) {
              interval = 5000; // Intervalle de 5 secondes pour les vitesses > 30 km/h
            } else {
              interval = 10000; // Intervalle de 10 secondes pour les vitesses <= 30 km/h

            }
            // Afficher la vitesse et l'intervalle de prise de données
            Serial.print("Speed: ");
            Serial.print(speed);
            Serial.print(" km/h, Interval: ");
            Serial.print(interval / 1000);
            Serial.println(" seconds");
            
          }
        }
         else {
        Serial.println(F("INVALID"));
        }

    /* check if we have new GPS data
    if (gps.speed.knots() != TinyGPSPlus::GPS_INVALID_F_SPEED) {
      float speed = gps.speed.knots();
      // adjust print interval based on speed
      if (speed < lastSpeed) {
        printInterval += 1000;
      } else if (speed > lastSpeed && printInterval > 1000) {
        printInterval -= 500;
      }
      lastSpeed = speed;
      // print GPS data
      Serial.print("Speed: ");
      Serial.print(speed);
      Serial.print(" knots, Print Interval: ");
      Serial.print(printInterval);
      Serial.println(" ms");
    }
    */
  }
}
void ppsISR() {
  lastPpsTime = millis();
  ppsTriggered = true;
}
