#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <SD.h>

const int chipSelect = 10;

static const int RXPin = 4, TXPin = 5;
static const uint32_t GPSBaud = 4800;

File dataFile;
char filename[] = "LOGGER00.CSV";

// The TinyGPS++ object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

// For stats that happen every 5 seconds
//unsigned long last = 0UL;

unsigned long interval=5000;  // the time we need to wait
unsigned long previousMillis=0; // millis() returns an unsigned long.

void setup()
{
  Serial.begin(9600);
  ss.begin(GPSBaud);

  Serial.print(F("Initializing SD card. "));
  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  pinMode(10, OUTPUT);
  
  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println(F("Card failed."));
    // don't do anything more:
    return;
  }
  Serial.println(F("Card initialized."));
  
// create a new file with a new filenumber
for (uint8_t i = 0; i < 100; i++) {
    filename[6] = i/10 + '0';
    filename[7] = i%10 + '0';
      if (! SD.exists(filename)) {
      // only open a new file if it doesn't exist
      dataFile = SD.open(filename, FILE_WRITE);
      break; // leave the loop
      }
      dataFile.close();
  }
if (! dataFile) {
  Serial.println("couldnt create file");
  }
  Serial.print("Logging to: ");
  Serial.println(filename);
  Serial.println("");  
  
    //_________________________Write Log File Header__________________________________________________
File dataFile = SD.open(filename, FILE_WRITE); 
  if (dataFile)
  {                                 
    dataFile.print(F("Latitude"));          
    dataFile.print(",");
    dataFile.print(F("Longitude"));
    dataFile.print(",");
    dataFile.print(F("Altitude [MuM]"));
    dataFile.print(",");
    dataFile.print(F("Speed [km/h]"));
    dataFile.print(",");
    dataFile.print(F("Date"));
    dataFile.print(",");
    dataFile.print(F("Time"));
    dataFile.print(",");
    dataFile.println(F("Destination dist. [km]"));
    dataFile.close();
  }
    Serial.print(F("Latitude"));          
    Serial.print(",");
    Serial.print(F("Longitude"));
    Serial.print(",");
    Serial.print(F("Altitude"));
    Serial.print(",");
    Serial.print(F("Speed"));
    Serial.print(",");
    Serial.print(F("Date"));
    Serial.print(",");
    Serial.print(F("Time"));
    Serial.print(",");
    Serial.println(F("Zielentfernung"));
}

void loop()
{
  // Dispatch incoming characters
  while (ss.available() > 0)
    gps.encode(ss.read());
    
if ((unsigned long)(millis() - previousMillis) >= interval) { //Logintervall
    previousMillis = millis();
    
if (gps.location.isUpdated())
  {


    File dataFile = SD.open(filename, FILE_WRITE);
    dataFile.print(gps.location.lat(), 6);                //print location data
    dataFile.print(F(","));
    dataFile.print(gps.location.lng(), 6);
    dataFile.print(F(","));

    dataFile.print(gps.altitude.meters());                //print altitude
    dataFile.print(F(","));

    dataFile.print(gps.speed.kmph());                    //print speed
    dataFile.print(F(","));

    if (gps.date.day()<10){  // Print date. Add a leading zero, if necessary.
     dataFile.print(0);
     }
    dataFile.print(gps.date.day());
    dataFile.print(F("."));
    
    if (gps.date.month()<10){  // Add a zero, if necessary, as above
     dataFile.print(0);
     }
    dataFile.print(gps.date.month());
    dataFile.print(F("."));
    
    dataFile.print(gps.date.year());
    dataFile.print(F(","));

    if (gps.time.hour()<10){            //Print GMT time. Add a zero, if necessary, as above
     dataFile.print(0);
     }
    dataFile.print(gps.time.hour());
    dataFile.print(F(":"));
    
    if (gps.time.minute()<10){  // Add a zero, if necessary, as above
     dataFile.print(0);
     }
    dataFile.print(gps.time.minute());
    dataFile.print(F(":"));
    
    if (gps.time.second()<10){  // Add a zero, if necessary, as above
     dataFile.print(0);
     }
    dataFile.print(gps.time.second());
    dataFile.print(F(","));


    if (gps.location.isValid())
    {
      static const double LONDON_LAT = 51.508131, LONDON_LON = -0.128002;     //custom location
      double distanceToLondon =
        TinyGPSPlus::distanceBetween(
          gps.location.lat(),
          gps.location.lng(),
          LONDON_LAT, 
          LONDON_LON);
      double courseToLondon =
        TinyGPSPlus::courseTo(
          gps.location.lat(),
          gps.location.lng(),
          LONDON_LAT, 
          LONDON_LON);
          
    dataFile.println(distanceToLondon/1000, 6);                //print the distance to your custom location
    dataFile.close();

    }
  }
 }
}
