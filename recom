#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <LiquidCrystal_I2C.h> // Library for LCD

const int RXPin = 4, TXPin = 5;  
const uint32_t GPSBaud = 4800;

SoftwareSerial gpsSerial(RXPin, TXPin); // RX, TX
TinyGPSPlus gps;
LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address 0x27, 16 column and 2 rows

float lastTime=0; 

  void setup() {
  Serial.begin(9600); // port serial de communication avec le pc
  gpsSerial.begin(GPSBaud); // port serial de communication avec le capteur GPS
 
  Serial.println(F("Arduino - GPS module"));                                                   
  }


void loop() {
 
 if(gpsSerial.available()>0)
 {
   gps.encode(gpsSerial.read());
 }

  if ((millis() - lastTime) >= interval) {    
        
        if (gps.location.isValid()) {   

        Serial.print(F("- latitude: "));
        Serial.println(gps.location.lat());

        Serial.print(F("- longitude: "));  //print(F()) signifie que le string n'utilise pas de RAM. Si vous utilisez F(), vous pouvez déplacer les string constant vers la mémoire programme au lieu de la RAM. Cela prendra de l'espace et diminuera la quantité d'autre code que vous pouvez écrire. Mais cela libérera de la RAM dynamique.
        Serial.println(gps.location.lng());

        Serial.print(F("- altitude: "));
        if (gps.altitude.isValid())
          Serial.println(gps.altitude.meters());
        else
          Serial.println(F("INVALID"));
      } else {
        Serial.println(F("- location: INVALID"));
      }

      Serial.print(F("- GPS date&time: "));
      if (gps.date.isValid() && gps.time.isValid()) {
        Serial.print(gps.date.year());
        Serial.print(F("-"));
        Serial.print(gps.date.month());
        Serial.print(F("-"));
        Serial.print(gps.date.day());
        Serial.print(F(" "));
        Serial.print(gps.time.hour());
        Serial.print(F(":"));
        Serial.print(gps.time.minute());
        Serial.print(F(":"));
        Serial.println(gps.time.second());
      } else {
        Serial.println(F("INVALID"));
      }

      if (gps.speed.isValid()) {
          int speed = gps.speed.kmph(); // On met en entier comme sur un vrai GPS 

          if (speed >= 0) {
            lastSpeed = speed;
            if (speed > 50) {
              interval = 2000; // Intervalle de 2secondes pour les vitesses > 50 km/h
              Serial.println("-----------Vitesse supérieure à 50 ------- interval de 2 secondes"); 
              
            } else if (speed > 30) {
              interval = 5000; // Intervalle de 5 secondes pour les vitesses > 30 km/h
              Serial.println("*************Vitesse supérieure à 30 et inférieur à 50 *********interval de 5 secondes"); 
              
            } else {
              interval = 10000; // Intervalle de 10 secondes pour les vitesses <= 30 km/h
              Serial.println("$$$$$$$$$$$ Vitesse inférieure ou égale à 30 $$$$$$$$$ interval de 10 secondes"); 
             
            }
            // Afficher la vitesse et l'intervalle de prise de données
            Serial.print("Speed: ");
            Serial.print(speed);
            Serial.print(" km/h, Interval: ");
            Serial.print(interval / 1000);
            Serial.println(" seconds");
            
          }
        }
         else {
        Serial.print("Speed: ");
        Serial.println(F("INVALID"));
        }
        Serial.println();   

      lastTime=millis(); 
      
  }
  else {
    Serial.flush();  
  }  
}
/*
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <LiquidCrystal_I2C.h> // Library for LCD

const int RXPin = 4, TXPin = 5;  
const uint32_t GPSBaud = 4800;

SoftwareSerial gpsSerial(RXPin, TXPin); // RX, TX
TinyGPSPlus gps;
LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address 0x27, 16 column and 2 rows

  void setup() {
  Serial.begin(9600); // port serial de communication avec le pc
  gpsSerial.begin(GPSBaud); // port serial de communication avec le capteur GPS
 
  Serial.println(F("Arduino - GPS module"));                                                   
  }


void loop() {
 
 if(gpsSerial.available()>0)
 {
   gps.encode(gpsSerial.read());
 }

 if (gps.location.isValid()) {   // isValid() pour vérifier que la data est valide et pas incensée 
                                     // Dans location on retrouve latitude et longitude 
        Serial.print(F("- latitude: "));
        Serial.println(gps.location.lat());

        Serial.print(F("- longitude: "));  //print(F()) signifie que le string n'utilise pas de RAM. Si vous utilisez F(), vous pouvez déplacer les string constant vers la mémoire programme au lieu de la RAM. Cela prendra de l'espace et diminuera la quantité d'autre code que vous pouvez écrire. Mais cela libérera de la RAM dynamique.
        Serial.println(gps.location.lng());

        Serial.print(F("- altitude: "));
        if (gps.altitude.isValid())
          Serial.println(gps.altitude.meters());
        else
          Serial.println(F("INVALID"));
      } else {
        Serial.println(F("- location: INVALID"));
      }

      Serial.print(F("- speed: "));
      if (gps.speed.isValid()) {
        Serial.print(gps.speed.kmph());
        Serial.println(F(" km/h"));
      } else {
        Serial.println(F("INVALID"));
      }

      Serial.print(F("- GPS date&time: "));
      if (gps.date.isValid() && gps.time.isValid()) {
        Serial.print(gps.date.year());
        Serial.print(F("-"));
        Serial.print(gps.date.month());
        Serial.print(F("-"));
        Serial.print(gps.date.day());
        Serial.print(F(" "));
        Serial.print(gps.time.hour());
        Serial.print(F(":"));
        Serial.print(gps.time.minute());
        Serial.print(F(":"));
        Serial.println(gps.time.second());
      } else {
        Serial.println(F("INVALID"));
      }

      Serial.println();   // Un retour à la ligne 

  Serial.flush();
      
}

*/
