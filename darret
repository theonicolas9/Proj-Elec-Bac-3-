#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <LiquidCrystal_I2C.h> // Library for LCD


static const int RXPin = 4, TXPin = 5;
static const uint32_t GPSBaud = 4800;

// The TinyGPS++ object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address 0x27, 16 column and 2 rows
// For stats that happen every 5 seconds
//unsigned long last = 0UL;

float speed_last=0.0; 
float darret =0.0; 
float c= 0.0; 

void setup()
{
  //New 
  lcd.init(); 
  lcd.backlight();       
   
  lcd.setCursor(0,0);
  lcd.print("Distance de ");
  lcd.setCursor(0,1);
  lcd.print(" Sécurité :  ");  
  
  Serial.begin(9600);
  ss.begin(GPSBaud);

}

void loop()
{
  // Dispatch incoming characters
  if (ss.available() > 0)                   // Simplement changer while en if -> OK 
    gps.encode(ss.read());

   float speed_curr = gps.speed.kmph();
//   latitude = gps.location.lat();
//   longitude = gps.location.lng();
//   date_year = gps.date.year();
//   date_month = gps.date.month();
//   date_day = gps.date.day();
//   time_hour = gps.time.hour();
//   time_minute = gps.time.minute();
//   time_second = gps.time.second();

if (gps.location.isUpdated())
  {


    Serial.println(F("Test"));    
    Serial.print(F("- latitude : ")); 
    Serial.println( gps.location.lat() );

    Serial.print(F("- longitude : ")); 
    Serial.println( gps.location.lng() );

    Serial.print(F("- speed_curr : "));  
    Serial.println( speed_curr );
    
    Serial.print(F("- date_day : ")); 
    Serial.println( gps.date.day() );
    
    
    Serial.print(F("- date_month : "));  
    Serial.println( gps.date.month() );
    
  
    Serial.print(F("- date_year : ")); 
    Serial.println( gps.date.year() );

    Serial.print(F("- time_hour : ")); 
    Serial.println( gps.time.hour() );
  
    Serial.print(F("- time_minute : ")); 
    Serial.println( gps.time.minute() );
    
    Serial.print(F("- time_second : ")); 
    Serial.println( gps.time.second() );

//New
     if ( speed_curr != speed_last ) 
            {
              int meteo = 0; // O pour un temps sec et 1 pour un temps de pluie 
              
               switch( meteo) {
                  case 0 : // en temps sec 
                 c= speed_curr/10;  // définition ou?
                 darret = pow(speed_curr,2); // fonction pow(nombre,exposant) nous donne la valeur du nombre élevé à la puissance indiquée. 
                    break;
                  default: // en temps de pluie
                 c= speed_curr/10;
                 darret= pow(speed_curr,2)*1,5; 
                    break;
                }  
             lcd.setCursor(12,1);
             lcd.print(darret);
             lcd.print(" m");
             Serial.print(F("- Distance d'arrêt : ")); 
             Serial.println( darret );
             speed_last = speed_curr;
            }  

  }
 }

